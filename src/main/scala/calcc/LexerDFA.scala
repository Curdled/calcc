package calcc

/**
 * Created by joe on 12/08/15.
 */
object LexerDFA {
  val tranisitions = Map(
    (0,List('+'))  -> 1,
    (0,List('-'))  -> 2,
    (0,List('*'))  -> 3,
    (0,List('!'))  -> 4,


    (0, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 5,

    (5, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 5,



    (5, List('.')) -> 6,
    (5, List('E', 'e')) -> 8,



    (6, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 7,

    (7, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 7,

    (7, List('E','e')) -> 8,

    (8, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 10,
    (8, List('+', '-')) -> 9,


    (9, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 10,

    (10, List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) -> 10,


    (0, List('c','C')) -> 21,
    (21, List('o','O')) -> 22,
    (22, List('s','S')) -> 23,

    (0, List(' ', '\t')) -> -1,
    (-1, List(' ', '\t')) -> -1
  )

  val start = 0

  val finish:Map[Int, (List[Char], Int) => LToken] =
    Map(1  -> {(_,x) => LPlus(x)},
      2  -> {(_,x) => LMinus(x)},
      3  -> {(_,x) => LMulti(x)},
      4  -> {(_,x) => LFact(x)},
      5  -> {(a,x) => LNum(a, x)},
      6  -> {(a,x) => LNum(a, x)},
      7  -> {(a,x) => LNum(a, x)},
      10 -> {(a,x) => LNum(a, x)},
      23 -> {(w,x) => LCos(x)},
      -1-> {(w,x) => LWS(x)}

    )
}
